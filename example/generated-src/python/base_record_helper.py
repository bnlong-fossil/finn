# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from example.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyRecord, CPyString

from hien import Hien
from hien_helper import HienHelper
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

from base_record import BaseRecord

class BaseRecordHelper:
    @staticmethod
    def release(c_ptr):
        assert c_ptr in c_data_set
        c_data_set.remove(ffi.cast("void*", c_ptr))

    @ffi.callback("struct DjinniString *(struct DjinniRecordHandle *)")
    def get_base_record_f1(cself):
        try:
            with CPyString.fromPy(CPyRecord.toPy(None, cself).hien) as py_obj:
                _ret = py_obj.release_djinni_string()
                assert _ret != ffi.NULL
                return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniString *(struct DjinniRecordHandle *)")
    def get_base_record_f2(cself):
        try:
            with CPyString.fromPy(CPyRecord.toPy(None, cself).hien_1) as py_obj:
                _ret = py_obj.release_djinni_string()
                assert _ret != ffi.NULL
                return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniString *(struct DjinniRecordHandle *)")
    def get_base_record_f3(cself):
        try:
            with CPyString.fromPy(CPyRecord.toPy(None, cself).parent) as py_obj:
                _ret = py_obj.release_djinni_string()
                assert _ret != ffi.NULL
                return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniRecordHandle *(struct DjinniString *,struct DjinniString *,struct DjinniString *)")
    def python_create_base_record(hien,hien_1,parent):
        py_rec = BaseRecord(
            CPyString.toPy(hien),
            CPyString.toPy(hien_1),
            CPyString.toPy(parent))
        return CPyRecord.fromPy(BaseRecord.c_data_set, py_rec) #to do: can be optional?

    @ffi.callback("void (struct DjinniRecordHandle *)")
    def __delete(dh):
        assert dh in BaseRecord.c_data_set
        BaseRecord.c_data_set.remove(dh)

    @staticmethod
    def _add_callbacks():
        lib.base_record_add_callback_get_base_record_f3(BaseRecordHelper.get_base_record_f3)
        lib.base_record_add_callback_python_create_base_record(BaseRecordHelper.python_create_base_record)
        lib.base_record_add_callback___delete(BaseRecordHelper.__delete)
        lib.base_record_add_callback_get_base_record_f1(BaseRecordHelper.get_base_record_f1)
        lib.base_record_add_callback_get_base_record_f2(BaseRecordHelper.get_base_record_f2)

BaseRecordHelper._add_callbacks()


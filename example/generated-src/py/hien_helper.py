# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from example.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyPrimitive, CPyRecord
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

from hien import Hien

class HienHelper:
    @staticmethod
    def release(c_ptr):
        assert c_ptr in c_data_set
        c_data_set.remove(ffi.cast("void*", c_ptr))

    @ffi.callback("int8_t(struct DjinniRecordHandle *)")
    def get_hien_f1(cself):
        try:
            _ret = CPyPrimitive.fromPy(CPyRecord.toPy(None, cself).val)
            return _ret
        except Exception as _djinni_py_e:
            CPyException.setExceptionFromPy(_djinni_py_e)
            return ffi.NULL

    @ffi.callback("struct DjinniRecordHandle *(int8_t)")
    def python_create_hien(val):
        py_rec = Hien(
            CPyPrimitive.toPy(val))
        return CPyRecord.fromPy(Hien.c_data_set, py_rec) #to do: can be optional?

    @ffi.callback("void (struct DjinniRecordHandle *)")
    def __delete(dh):
        assert dh in Hien.c_data_set
        Hien.c_data_set.remove(dh)

    @staticmethod
    def _add_callbacks():
        lib.hien_add_callback_python_create_hien(HienHelper.python_create_hien)
        lib.hien_add_callback_get_hien_f1(HienHelper.get_hien_f1)
        lib.hien_add_callback___delete(HienHelper.__delete)

HienHelper._add_callbacks()


# AUTOGENERATED FILE - DO NOT MODIFY!
# This file generated by Djinni from example.djinni

from djinni.support import MultiSet # default imported in all files
from djinni.exception import CPyException # default imported in all files
from djinni.pycffi_marshal import CPyRecord

from abc import ABCMeta, abstractmethod
from future.utils import with_metaclass
from rc import Rc
from rc_helper import RcHelper
from PyCFFIlib_cffi import ffi, lib

from djinni import exception # this forces run of __init__.py which gives cpp option to call back into py to create exception

class Hello(with_metaclass(ABCMeta)):
    @abstractmethod
    def print(self, r):
        raise NotImplementedError

    @staticmethod
    def create():
        return HelloCppProxy.create()
    @staticmethod
    def create_with_rc(r):
        return HelloCppProxy.create_with_rc(r)

class HelloCppProxy(Hello):
    def __init__(self, proxy):
        self._is_cpp_proxy = True
        self._cpp_impl = proxy
    def __del__(self):
        if not lib:
            return
        lib.hello___wrapper_dec_ref(self._cpp_impl)

    @staticmethod
    def create():
        _ret_c = lib.cw__hello_create()
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = HelloHelper.toPy(_ret_c)
        assert _ret is not None
        return _ret

    @staticmethod
    def create_with_rc(r):
        _ret_c = lib.cw__hello_create_with_rc(CPyRecord.fromPy(Rc.c_data_set, r))
        CPyException.toPyCheckAndRaise(_ret_c)
        _ret = HelloHelper.toPy(_ret_c)
        assert _ret is not None
        return _ret

    def print(self, r):
        lib.cw__hello_print(self._cpp_impl, CPyRecord.fromPy(Rc.c_data_set, r))
        CPyException.toPyCheckAndRaise(ffi.NULL)

class HelloHelper:
    c_data_set = MultiSet()
    @staticmethod
    def toPy(obj):
        if obj == ffi.NULL:
            return None
        return HelloCppProxy(obj)

